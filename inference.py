# -*- coding: utf-8 -*-
"""scaledyolov4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nuD7Wjm8eQZ_GffDrEoYmo5zeGP2vNBj
"""

import os
from google.colab import drive
drive.mount('/content/gdrive')

"""#Step0: Use GPU"""

import torch
torch.cuda.is_available()

! nvidia-smi

"""#Step1: Git clone"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My Drive
!wget https://github.com/WongKinYiu/ScaledYOLOv4/archive/yolov4-csp.zip
!unzip yolov4-csp.zip && rm yolov4-csp.zip

"""#Step2: Install requirements"""

!pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html

import os
import cv2
import time
from tqdm import tqdm
from google_drive_downloader import GoogleDriveDownloader as gdd

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/thomasbrandon/mish-cuda
# %cd mish-cuda
!python setup.py build install

!pip install -U PyYAML

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My Drive/ScaledYOLOv4-yolov4-csp

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/ScaledYOLOv4-yolov4-csp/data
!touch digits.yaml
# %cd /content/gdrive/MyDrive/ScaledYOLOv4-yolov4-csp/data

# Commented out IPython magic to ensure Python compatibility.
# %%writefile digits.yaml
# # train: /content/gdrive/MyDrive/ScaledYOLOv4-yolov4-csp/data/train.txt
# # val: /content/gdrive/MyDrive/ScaledYOLOv4-yolov4-csp/data/valid.txt
# test: /content/gdrive/MyDrive/ScaledYOLOv4-yolov4-csp/data/test.txt
# nc: 10
# names: ['1.0','2.0','3.0','4.0','5.0','6.0','7.0','8.0','9.0','10.0']

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/ScaledYOLOv4-yolov4-csp/

# 複製一個 cfg 檔
!cp models/yolov4-csp.cfg models/yolov4-csp_416.cfg
# 查看修改前的參數
!sed -n -e 8p -e 9p -e 1022p -e 1029p -e 1131p -e 1138p -e 1240p -e 1247p models/yolov4-csp_416.cfg

!sed -i '8s/512/576/' models/yolov4-csp_416.cfg
!sed -i '9s/512/576/' models/yolov4-csp_416.cfg
!sed -i '1022s/255/45/' models/yolov4-csp_416.cfg
!sed -i '1029s/80/10/' models/yolov4-csp_416.cfg
!sed -i '1131s/255/45/' models/yolov4-csp_416.cfg
!sed -i '1138s/80/10/' models/yolov4-csp_416.cfg
!sed -i '1240s/255/45/' models/yolov4-csp_416.cfg
!sed -i '1247s/80/10/' models/yolov4-csp_416.cfg
# 查看修改後的參數
!sed -n -e 8p -e 9p -e 1022p -e 1029p -e 1131p -e 1138p -e 1240p -e 1247p models/yolov4-csp_416.cfg

"""# STEP 3: Wget testing data """

!cp /content/gdrive/MyDrive/yolov4/obj_test.zip ../
!unzip ../obj_test.zip -d data/

!cp /content/gdrive/MyDrive/yolov4/generate_test.py ./

! python generate_test.py

"""# STEP 4: Run inferene and bench mark"""

from google.colab import drive
drive.mount('/content/gdrive')

!cp /content/gdrive/MyDrive/yolov4/best.pt ./

!cp /content/gdrive/MyDrive/yolov4/obj.names ./data

!ls

!python test.py --img 576 --conf 0.5 --batch 8 --device 0 --data data/digits.yaml --names data/obj.names --cfg models/yolov4-csp_416.cfg --weights best.pt --task test --save-json

data_listdir = os.listdir("./data/test_jpg")
# Test your inference time
TEST_IMAGE_NUMBER = 100 # This number is fixed.
test_img_list = []

# Read image (Be careful with the image order)
data_listdir.sort(key = lambda x: int(x[:-4]))

with open("test.txt", "w") as outfile:
  for img_name in data_listdir[:TEST_IMAGE_NUMBER]:
    img_path = os.path.join("/data/test_jpg", img_name)
    test_img_list.append(img_path)
    outfile.write(img_path)
    outfile.write("\n")
  outfile.close()  
start_time = time.time()
# for img in tqdm(test_img_list):
    # your model prediction
pred = !python test.py --img 576 --conf 0.001 --batch 8 --device 0 --data data/digits.yaml --names data/obj.names --cfg models/yolov4-csp_416.cfg --weights best.pt --task test
end_time  = time.time()
print("\nInference time per image: ", (end_time - start_time) / len(test_img_list))

"""# STEP 5: Generate answer.json for submission on Codalab
The answer.json has the same format as [COCO dataset results](https://cocodataset.org/#format-results)
"""

!ls

import json
from PIL import Image
import os
import numpy as np
answer = []
with open('runs/test/exp/best_predictions.json', newline='') as jsonfile:
    data = json.load(jsonfile)
    for i in range(len(data)):
        category_id = data[i]['category_id'] + 1
        if category_id == 10:
            category_id = 0
        score = data[i]['score']
        image_id = data[i]['image_id']
        bbox = data[i]['bbox']

        answer.append({
            'image_id' : image_id,
            'score' : score,
            'category_id' : category_id,
            'bbox' : bbox})
print(len(answer))
with open('answer.json', 'w') as f:
    json.dump(answer,f)